// Code generated by fino2. DO NOT EDIT.
// Rerunning fino will overwrite this file.
// Version: v0.1.0
// Version Date:

package grpc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"github.com/chaos-io/gokit/tracing"
	"github.com/go-kit/kit/log"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/grpc/metadata"

	// this service api
	"github.com/chaos-io/cargo/backend/modules/cargo-server/api/endpoint"
	pb "github.com/chaos-io/cargo/genproto/cargo/v1"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC CargoServiceServer.
func MakeGRPCServer(endpoints endpoint.Endpoints, tracer trace.Tracer, logger log.Logger) pb.CargoServiceServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
		grpctransport.ServerErrorLogger(logger),
	}

	addTracerOption := func(methodName string) []grpctransport.ServerOption {
		if tracer != nil {
			return append(serverOptions, grpctransport.ServerBefore(tracing.GRPCToContext(tracer, methodName)))
		}
		return serverOptions
	}

	// CargoService
	return &grpcServer{
		getCargo: grpctransport.NewServer(
			endpoints.GetCargoEndpoint,
			DecodeGRPCGetCargoRequest,
			EncodeGRPCGetCargoResponse,
			addTracerOption("GetCargo")...,
		), createCargo: grpctransport.NewServer(
			endpoints.CreateCargoEndpoint,
			DecodeGRPCCreateCargoRequest,
			EncodeGRPCCreateCargoResponse,
			addTracerOption("CreateCargo")...,
		), handingEvent: grpctransport.NewServer(
			endpoints.HandingEventEndpoint,
			DecodeGRPCHandingEventRequest,
			EncodeGRPCHandingEventResponse,
			addTracerOption("HandingEvent")...,
		),
	}
}

// grpcServer implements the CargoServiceServer interface
type grpcServer struct {
	pb.UnimplementedCargoServiceServer

	getCargo     grpctransport.Handler
	createCargo  grpctransport.Handler
	handingEvent grpctransport.Handler
}

// Methods for grpcServer to implement CargoServiceServer interface

func (s *grpcServer) GetCargo(ctx context.Context, req *pb.GetCargoReq) (*pb.GetCargoResp, error) {
	_, rep, err := s.getCargo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetCargoResp), nil
}

func (s *grpcServer) CreateCargo(ctx context.Context, req *pb.CreateCargoReq) (*pb.CreateCargoResp, error) {
	_, rep, err := s.createCargo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CreateCargoResp), nil
}

func (s *grpcServer) HandingEvent(ctx context.Context, req *pb.HandingEventReq) (*pb.HandingEventResp, error) {
	_, rep, err := s.handingEvent.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.HandingEventResp), nil
}

// Server Decode

// DecodeGRPCGetCargoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetCargo request to a user-domain GetCargo request. Primarily useful in a server.
func DecodeGRPCGetCargoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetCargoReq)
	return req, nil
}

// DecodeGRPCCreateCargoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC CreateCargo request to a user-domain CreateCargo request. Primarily useful in a server.
func DecodeGRPCCreateCargoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateCargoReq)
	return req, nil
}

// DecodeGRPCHandingEventRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC HandingEvent request to a user-domain HandingEvent request. Primarily useful in a server.
func DecodeGRPCHandingEventRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HandingEventReq)
	return req, nil
}

// Server Encode

// EncodeGRPCGetCargoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetCargo response to a gRPC GetCargo reply. Primarily useful in a server.
func EncodeGRPCGetCargoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetCargoResp)
	return resp, nil
}

// EncodeGRPCCreateCargoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain CreateCargo response to a gRPC CreateCargo reply. Primarily useful in a server.
func EncodeGRPCCreateCargoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CreateCargoResp)
	return resp, nil
}

// EncodeGRPCHandingEventResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain HandingEvent response to a gRPC HandingEvent reply. Primarily useful in a server.
func EncodeGRPCHandingEventResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.HandingEventResp)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
