// Code generated by fino2. DO NOT EDIT.
// Rerunning fino will overwrite this file.
// Version: v0.1.0
// Version Date:

package endpoint

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/endpoint"

	// this service api
	pb "github.com/chaos-io/cargo/genproto/cargo/v1"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	GetCargoEndpoint     endpoint.Endpoint
	CreateCargoEndpoint  endpoint.Endpoint
	HandingEventEndpoint endpoint.Endpoint
}

// Endpoints

func (e Endpoints) GetCargo(ctx context.Context, in *pb.GetCargoReq) (*pb.GetCargoResp, error) {
	response, err := e.GetCargoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GetCargoResp), nil
}

func (e Endpoints) CreateCargo(ctx context.Context, in *pb.CreateCargoReq) (*pb.CreateCargoResp, error) {
	response, err := e.CreateCargoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.CreateCargoResp), nil
}

func (e Endpoints) HandingEvent(ctx context.Context, in *pb.HandingEventReq) (*pb.HandingEventResp, error) {
	response, err := e.HandingEventEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.HandingEventResp), nil
}

// Make Endpoints

func MakeGetCargoEndpoint(s pb.CargoServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetCargoReq)
		v, err := s.GetCargo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeCreateCargoEndpoint(s pb.CargoServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CreateCargoReq)
		v, err := s.CreateCargo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeHandingEventEndpoint(s pb.CargoServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.HandingEventReq)
		v, err := s.HandingEvent(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"GetCargo":     struct{}{},
		"CreateCargo":  struct{}{},
		"HandingEvent": struct{}{},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc, _ := range included {
		if inc == "GetCargo" {
			e.GetCargoEndpoint = middleware(e.GetCargoEndpoint)
		}
		if inc == "CreateCargo" {
			e.CreateCargoEndpoint = middleware(e.CreateCargoEndpoint)
		}
		if inc == "HandingEvent" {
			e.HandingEventEndpoint = middleware(e.HandingEventEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"GetCargo":     struct{}{},
		"CreateCargo":  struct{}{},
		"HandingEvent": struct{}{},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc, _ := range included {
		if inc == "GetCargo" {
			e.GetCargoEndpoint = middleware("GetCargo", e.GetCargoEndpoint)
		}
		if inc == "CreateCargo" {
			e.CreateCargoEndpoint = middleware("CreateCargo", e.CreateCargoEndpoint)
		}
		if inc == "HandingEvent" {
			e.HandingEventEndpoint = middleware("HandingEvent", e.HandingEventEndpoint)
		}
	}
}
