// TODO: svc/transport-grpc.go
// Code generated by fino. DO NOT EDIT.
// Rerunning fino will overwrite this file.
// Version: v0.1.0
// Version Date:

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"github.com/chaos-io/cargo/backend/modules/cargo/api/endpoint"
	"github.com/chaos-io/gokit/tracing"
	"github.com/go-kit/kit/log"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/grpc/metadata"

	// this service api
	"github.com/chaos-io/cargo/genproto/cargo"
	pb "github.com/chaos-io/cargo/genproto/cargo/v1"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC CargoServer.
func MakeGRPCServer(endpoints endpoint.Endpoints, tracer trace.Tracer, logger log.Logger) pb.CargoServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
		grpctransport.ServerErrorLogger(logger),
	}

	addTracerOption := func(methodName string) []grpctransport.ServerOption {
		if tracer != nil {
			return append(serverOptions, grpctransport.ServerBefore(tracing.GRPCToContext(tracer, methodName)))
		}
		return serverOptions
	}

	return &grpcServer{
		// Cargo
		createResource: grpctransport.NewServer(
			endpoints.CreateResourceEndpoint,
			DecodeGRPCCreateResourceRequest,
			EncodeGRPCCreateResourceResponse,
			addTracerOption("CreateResource")...,
		),
		getResource: grpctransport.NewServer(
			endpoints.GetResourceEndpoint,
			DecodeGRPCGetResourceRequest,
			EncodeGRPCGetResourceResponse,
			addTracerOption("GetResource")...,
		),
		listResources: grpctransport.NewServer(
			endpoints.ListResourcesEndpoint,
			DecodeGRPCListResourcesRequest,
			EncodeGRPCListResourcesResponse,
			addTracerOption("ListResources")...,
		),
		updateResource: grpctransport.NewServer(
			endpoints.UpdateResourceEndpoint,
			DecodeGRPCUpdateResourceRequest,
			EncodeGRPCUpdateResourceResponse,
			addTracerOption("UpdateResource")...,
		),
		deleteResource: grpctransport.NewServer(
			endpoints.DeleteResourceEndpoint,
			DecodeGRPCDeleteResourceRequest,
			EncodeGRPCDeleteResourceResponse,
			addTracerOption("DeleteResource")...,
		),
	}
}

// grpcServer implements the CargoServer interface
type grpcServer struct {
	pb.UnimplementedCargoServer

	createResource grpctransport.Handler
	getResource    grpctransport.Handler
	listResources  grpctransport.Handler
	updateResource grpctransport.Handler
	deleteResource grpctransport.Handler
}

// Methods for grpcServer to implement CargoServer interface

func (s *grpcServer) CreateResource(ctx context.Context, req *pb.CreateResourceRequest) (*cargo.Resource, error) {
	_, rep, err := s.createResource.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*cargo.Resource), nil
}

func (s *grpcServer) GetResource(ctx context.Context, req *pb.GetResourceRequest) (*cargo.Resource, error) {
	_, rep, err := s.getResource.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*cargo.Resource), nil
}

func (s *grpcServer) ListResources(ctx context.Context, req *pb.ListResourcesRequest) (*pb.ListResourcesResponse, error) {
	_, rep, err := s.listResources.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListResourcesResponse), nil
}

func (s *grpcServer) UpdateResource(ctx context.Context, req *pb.UpdateResourceRequest) (*cargo.Resource, error) {
	_, rep, err := s.updateResource.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*cargo.Resource), nil
}

func (s *grpcServer) DeleteResource(ctx context.Context, req *pb.DeleteResourceRequest) (*pb.DeleteResourceResponse, error) {
	_, rep, err := s.deleteResource.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.DeleteResourceResponse), nil
}

// Server Decode

// DecodeGRPCCreateResourceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC CreateResource request to a user-domain CreateResource request. Primarily useful in a server.
func DecodeGRPCCreateResourceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateResourceRequest)
	return req, nil
}

// DecodeGRPCGetResourceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetResource request to a user-domain GetResource request. Primarily useful in a server.
func DecodeGRPCGetResourceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetResourceRequest)
	return req, nil
}

// DecodeGRPCListResourcesRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC ListResources request to a user-domain ListResources request. Primarily useful in a server.
func DecodeGRPCListResourcesRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListResourcesRequest)
	return req, nil
}

// DecodeGRPCUpdateResourceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC UpdateResource request to a user-domain UpdateResource request. Primarily useful in a server.
func DecodeGRPCUpdateResourceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateResourceRequest)
	return req, nil
}

// DecodeGRPCDeleteResourceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC DeleteResource request to a user-domain DeleteResource request. Primarily useful in a server.
func DecodeGRPCDeleteResourceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteResourceRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCCreateResourceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain CreateResource response to a gRPC CreateResource reply. Primarily useful in a server.
func EncodeGRPCCreateResourceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*cargo.Resource)
	return resp, nil
}

// EncodeGRPCGetResourceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetResource response to a gRPC GetResource reply. Primarily useful in a server.
func EncodeGRPCGetResourceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*cargo.Resource)
	return resp, nil
}

// EncodeGRPCListResourcesResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain ListResources response to a gRPC ListResources reply. Primarily useful in a server.
func EncodeGRPCListResourcesResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListResourcesResponse)
	return resp, nil
}

// EncodeGRPCUpdateResourceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain UpdateResource response to a gRPC UpdateResource reply. Primarily useful in a server.
func EncodeGRPCUpdateResourceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*cargo.Resource)
	return resp, nil
}

// EncodeGRPCDeleteResourceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain DeleteResource response to a gRPC DeleteResource reply. Primarily useful in a server.
func EncodeGRPCDeleteResourceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.DeleteResourceResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
