// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cargo/v1/cargo.proto

package cargo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CargoService_GetCargo_FullMethodName     = "/cargo.v1.CargoService/GetCargo"
	CargoService_CreateCargo_FullMethodName  = "/cargo.v1.CargoService/CreateCargo"
	CargoService_HandingEvent_FullMethodName = "/cargo.v1.CargoService/HandingEvent"
)

// CargoServiceClient is the client API for CargoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CargoServiceClient interface {
	GetCargo(ctx context.Context, in *GetCargoReq, opts ...grpc.CallOption) (*GetCargoResp, error)
	CreateCargo(ctx context.Context, in *CreateCargoReq, opts ...grpc.CallOption) (*CreateCargoResp, error)
	HandingEvent(ctx context.Context, in *HandingEventReq, opts ...grpc.CallOption) (*HandingEventResp, error)
}

type cargoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCargoServiceClient(cc grpc.ClientConnInterface) CargoServiceClient {
	return &cargoServiceClient{cc}
}

func (c *cargoServiceClient) GetCargo(ctx context.Context, in *GetCargoReq, opts ...grpc.CallOption) (*GetCargoResp, error) {
	out := new(GetCargoResp)
	err := c.cc.Invoke(ctx, CargoService_GetCargo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoServiceClient) CreateCargo(ctx context.Context, in *CreateCargoReq, opts ...grpc.CallOption) (*CreateCargoResp, error) {
	out := new(CreateCargoResp)
	err := c.cc.Invoke(ctx, CargoService_CreateCargo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoServiceClient) HandingEvent(ctx context.Context, in *HandingEventReq, opts ...grpc.CallOption) (*HandingEventResp, error) {
	out := new(HandingEventResp)
	err := c.cc.Invoke(ctx, CargoService_HandingEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CargoServiceServer is the server API for CargoService service.
// All implementations must embed UnimplementedCargoServiceServer
// for forward compatibility
type CargoServiceServer interface {
	GetCargo(context.Context, *GetCargoReq) (*GetCargoResp, error)
	CreateCargo(context.Context, *CreateCargoReq) (*CreateCargoResp, error)
	HandingEvent(context.Context, *HandingEventReq) (*HandingEventResp, error)
	mustEmbedUnimplementedCargoServiceServer()
}

// UnimplementedCargoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCargoServiceServer struct {
}

func (UnimplementedCargoServiceServer) GetCargo(context.Context, *GetCargoReq) (*GetCargoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCargo not implemented")
}
func (UnimplementedCargoServiceServer) CreateCargo(context.Context, *CreateCargoReq) (*CreateCargoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCargo not implemented")
}
func (UnimplementedCargoServiceServer) HandingEvent(context.Context, *HandingEventReq) (*HandingEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandingEvent not implemented")
}
func (UnimplementedCargoServiceServer) mustEmbedUnimplementedCargoServiceServer() {}

// UnsafeCargoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CargoServiceServer will
// result in compilation errors.
type UnsafeCargoServiceServer interface {
	mustEmbedUnimplementedCargoServiceServer()
}

func RegisterCargoServiceServer(s grpc.ServiceRegistrar, srv CargoServiceServer) {
	s.RegisterService(&CargoService_ServiceDesc, srv)
}

func _CargoService_GetCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCargoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).GetCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CargoService_GetCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).GetCargo(ctx, req.(*GetCargoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CargoService_CreateCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCargoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).CreateCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CargoService_CreateCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).CreateCargo(ctx, req.(*CreateCargoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CargoService_HandingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandingEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).HandingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CargoService_HandingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).HandingEvent(ctx, req.(*HandingEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CargoService_ServiceDesc is the grpc.ServiceDesc for CargoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CargoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cargo.v1.CargoService",
	HandlerType: (*CargoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCargo",
			Handler:    _CargoService_GetCargo_Handler,
		},
		{
			MethodName: "CreateCargo",
			Handler:    _CargoService_CreateCargo_Handler,
		},
		{
			MethodName: "HandingEvent",
			Handler:    _CargoService_HandingEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cargo/v1/cargo.proto",
}
