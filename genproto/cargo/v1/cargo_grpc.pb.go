// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cargo/v1/cargo.proto

package cargo

import (
	context "context"
	cargo "github.com/chaos-io/cargo/genproto/cargo"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cargo_CreateResource_FullMethodName = "/cargo.v1.Cargo/CreateResource"
	Cargo_GetResource_FullMethodName    = "/cargo.v1.Cargo/GetResource"
	Cargo_ListResources_FullMethodName  = "/cargo.v1.Cargo/ListResources"
	Cargo_UpdateResource_FullMethodName = "/cargo.v1.Cargo/UpdateResource"
	Cargo_DeleteResource_FullMethodName = "/cargo.v1.Cargo/DeleteResource"
)

// CargoClient is the client API for Cargo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CargoClient interface {
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*cargo.Resource, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*cargo.Resource, error)
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*cargo.Resource, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
}

type cargoClient struct {
	cc grpc.ClientConnInterface
}

func NewCargoClient(cc grpc.ClientConnInterface) CargoClient {
	return &cargoClient{cc}
}

func (c *cargoClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*cargo.Resource, error) {
	out := new(cargo.Resource)
	err := c.cc.Invoke(ctx, Cargo_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*cargo.Resource, error) {
	out := new(cargo.Resource)
	err := c.cc.Invoke(ctx, Cargo_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, Cargo_ListResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*cargo.Resource, error) {
	out := new(cargo.Resource)
	err := c.cc.Invoke(ctx, Cargo_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, Cargo_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CargoServer is the server API for Cargo service.
// All implementations must embed UnimplementedCargoServer
// for forward compatibility
type CargoServer interface {
	CreateResource(context.Context, *CreateResourceRequest) (*cargo.Resource, error)
	GetResource(context.Context, *GetResourceRequest) (*cargo.Resource, error)
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*cargo.Resource, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	mustEmbedUnimplementedCargoServer()
}

// UnimplementedCargoServer must be embedded to have forward compatible implementations.
type UnimplementedCargoServer struct {
}

func (UnimplementedCargoServer) CreateResource(context.Context, *CreateResourceRequest) (*cargo.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedCargoServer) GetResource(context.Context, *GetResourceRequest) (*cargo.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedCargoServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedCargoServer) UpdateResource(context.Context, *UpdateResourceRequest) (*cargo.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedCargoServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedCargoServer) mustEmbedUnimplementedCargoServer() {}

// UnsafeCargoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CargoServer will
// result in compilation errors.
type UnsafeCargoServer interface {
	mustEmbedUnimplementedCargoServer()
}

func RegisterCargoServer(s grpc.ServiceRegistrar, srv CargoServer) {
	s.RegisterService(&Cargo_ServiceDesc, srv)
}

func _Cargo_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cargo_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cargo_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cargo_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cargo_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cargo_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cargo_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cargo_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cargo_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cargo_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cargo_ServiceDesc is the grpc.ServiceDesc for Cargo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cargo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cargo.v1.Cargo",
	HandlerType: (*CargoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _Cargo_CreateResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _Cargo_GetResource_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _Cargo_ListResources_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Cargo_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Cargo_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cargo/v1/cargo.proto",
}
